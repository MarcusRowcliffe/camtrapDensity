% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/camtrapDensity.R
\name{convert_units}
\alias{convert_units}
\title{Change the units of an REM parameter table}
\usage{
convert_units(
  param,
  radius_unit = c("km", "m", "cm"),
  angle_unit = c("radian", "degree"),
  active_speed_unit = c("km/day", "km/hour", "m/hour", "m/second"),
  overall_speed_unit = c("km/day", "km/hour", "m/hour", "m/second"),
  trap_rate_unit = c("day", "hour", "minute", "second"),
  density_unit = c("n/km2", "n/ha", "n/100km2")
)
}
\arguments{
\item{param}{An REM parameter dataframe as created with
\code{\link{get_parameter_table}}. Must contain columns \code{estimate},
\code{se}, \code{lcl95}, \code{ucl95} and \code{unit}, and at least one
row named from \code{radius}, \code{angle}, \code{active_speed},
\code{overall_speed}.}

\item{radius_unit}{A character string giving the output unit of radius.}

\item{angle_unit}{A character string giving the output unit of angle.}

\item{active_speed_unit}{A character string giving the output unit of
speed while active.}

\item{overall_speed_unit}{A character string giving the output unit of
day range.}

\item{trap_rate_unit}{A character string giving the output unit of trap rate.}

\item{density_unit}{A character string giving the output unit of density.}
}
\value{
A replica of input dataframe \code{param} with \code{estimate},
  \code{se} and confidence limit values converted to output units.
}
\description{
Changes the units of parameters from their current setting to new
user-defined units.
}
\examples{
  \dontrun{
    pkg <- camtraptor::read_camtrapDP("./datapackage/datapackage.json")
    }
  data(pkg)
  sp <- "Vulpes vulpes"
  trdata <- get_traprate_data(pkg, species=sp)
  radmod <- fit_detmodel(radius~1, pkg, species=sp, order=0)
  angmod <- fit_detmodel(angle~1, pkg, species=sp, unit="radian", order=0)
  spdmod <- fit_speedmodel(pkg, species=sp)
  actmod <- fit_actmodel(pkg, species=sp, reps=100)
  param <- get_parameter_table(trdata, radmod, angmod, spdmod, actmod)
  convert_units(param, radius_unit="m", angle_unit="degree", active_speed_unit="m/second")
}
